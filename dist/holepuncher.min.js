"use strict";class Cache{constructor(){let a=!(0<arguments.length&&arguments[0]!==void 0)||arguments[0];this.name="holepuncher",this.isSupported="undefined"!=typeof caches&&a}async get(a){if(this.isSupported){const b=await caches.open(this.name);return await b.match(a)}}async put(a,b){if(this.isSupported){const c=await caches.open(this.name);return await c.put(a,b)}}async delete(){if(this.isSupported)return await caches.delete(this.name)}}class EventDispatcher{constructor(){const a=document.createDocumentFragment();["addEventListener","dispatchEvent","removeEventListener"].forEach(b=>this[b]=function(){return a[b](...arguments)})}on(a,b){return this.addEventListener(a,b)}fire(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{};return this.dispatchEvent(new CustomEvent(a,{detail:b}))}}class HolePuncher{constructor(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{},b=a.localCache,c=a.verbose;this.cache=new Cache(!(void 0!==b)||b),this.events=new EventDispatcher,this.log=function(){if(!0===(void 0!==c&&c)&&self.console&&"function"==typeof console.log){for(var a=arguments.length,b=Array(a),d=0;d<a;d++)b[d]=arguments[d];b.unshift("[HolePuncher]"),console.log.apply(null,b)}}}async fetch(a,b){const c=await this.cache.get(new Request(a));return c?(this.log("Event fetch_data",c),this.events.fire("fetch_data",{response:c,context:b,cached:!0}),c):(this.log("Event before_fetch"),this.events.fire("before_fetch",{context:b}),fetch(a,{mode:"no-cors",credentials:"same-origin"}).then(c=>{if(c.ok){const d=c.clone();return this.log("Event fetch_data",c),this.events.fire("fetch_data",{response:d,context:b,cached:!1}),this.cache.put(a,c),d}}).catch(a=>{this.log(a)}))}flush(){new Cache().delete(),this.log("Event flush"),this.events.fire("flush")}}function punch_one(a,b){let c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};const d=new HolePuncher(c),e=document.getElementById(b);return d.fetch(a).then(a=>a.text()).then(a=>{e.innerHTML=a}),d}function punch_all(a){let b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"data-url",c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};const d=new HolePuncher(c),e=document.querySelectorAll(a);return e.forEach(a=>{d.fetch(a.getAttribute(b),a)}),d.events.on("fetch_data",a=>{const b=a.detail.context,c=a.detail.response.clone();c.text().then(a=>{b.innerHTML=a})}),d}function punch_flush(){let a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};const b=new HolePuncher(a);return b.flush(),b}"undefined"!=typeof module&&(module.exports={HolePuncher,punch_one,punch_all,punch_flush});
